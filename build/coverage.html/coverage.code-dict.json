{"/home/travis/build/npmtest/node-npmtest-lost/test.js":"/* istanbul instrument in package npmtest_lost */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lost/lib.npmtest_lost.js":"/* istanbul instrument in package npmtest_lost */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lost = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lost = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lost/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lost && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lost */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lost\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lost.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lost.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lost.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lost.__dirname + '/lib.npmtest_lost.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lost.js":"// Module dependencies\nvar postcss = require('postcss');\nvar assign = require('object-assign');\n\nvar lostAtRule = require('./lib/lost-at-rule');\nvar lostUtility = require('./lib/lost-utility');\nvar lostFlexContainer = require('./lib/lost-flex-container');\nvar lostCenter = require('./lib/lost-center');\nvar lostAlign = require('./lib/lost-align');\nvar lostColumn = require('./lib/lost-column');\nvar lostRow = require('./lib/lost-row');\nvar lostWaffle = require('./lib/lost-waffle');\nvar lostOffset = require('./lib/lost-offset');\nvar lostMove = require('./lib/lost-move');\nvar lostMasonryWrap = require('./lib/lost-masonry-wrap');\nvar lostMasonryColumn = require('./lib/lost-masonry-column');\nvar checkNodeVersion = require('./lib/check-node-version');\nvar lgGutter = require('./lib/lg-gutter');\n\n// Get the version of Node\nvar nodeVersion = process.env.npm_config_node_version;\n\n// Lost At Rules and Declarations\nvar libs = [\n  lostAtRule,\n  lgGutter,\n  lostMove,\n  lostUtility,\n  lostFlexContainer,\n  lostCenter,\n  lostAlign,\n  lostColumn,\n  lostRow,\n  lostWaffle,\n  lostOffset,\n  lostMasonryWrap,\n  lostMasonryColumn\n];\n\nvar defaultSettings = {\n  gutter: '30px',\n  flexbox: 'no-flex',\n  cycle: 'auto',\n  clearing: 'both',\n  rounder: 99.9,\n  gridUnit: '%',\n  direction: 'ltr'\n};\n\nmodule.exports = postcss.plugin('lost', function lost(settings) {\n  var theseSettings = assign({}, defaultSettings, settings || {});\n\n  if (checkNodeVersion(nodeVersion).warn === true) {\n    console.log(checkNodeVersion(nodeVersion).warning); // eslint-disable-line no-console\n  }\n\n  return function executeLostGrid(css, result) {\n    libs.forEach(function executeEachLostRule(lib) {\n      lib(css, theseSettings, result);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-at-rule.js":"/**\n* Override global settings from at-rules set in stylesheet.\n*\n* @example\n*   @lost gutter 60px;\n*\n*   div {\n*     lost-column: 1/3;\n*   }\n*/\nmodule.exports = function lostAtRule(css, Settings) {\n  css.walkAtRules('lost', function lostAtRuleFunction(Rule) {\n    var rule = Rule;\n    var settings = Settings;\n\n    rule.params = rule.params.split(' ');\n\n    if (rule.params[0] === 'clearing') {\n      settings.clearing = rule.params[1];\n    }\n    if (rule.params[0] === 'gutter') {\n      settings.gutter = rule.params[1];\n    }\n    if (rule.params[0] === 'flexbox') {\n      settings.flexbox = rule.params[1];\n    }\n    if (rule.params[0] === 'rounder') {\n      settings.rounder = rule.params[1];\n    }\n    if (rule.params[0] === '--beta-direction') {\n      settings.direction = rule.params[1];\n    }\n    if (rule.params[0] === 'cycle') {\n      if (rule.params[1] !== 'auto') {\n        if (rule.params[1] === 'none' || rule.params[1] === '0') {\n          settings.cycle = 0;\n        } else {\n          settings.cycle = rule.params[1];\n        }\n      } else {\n        settings.cycle = 'auto';\n      }\n    }\n    rule.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-utility.js":"var newBlock = require('./new-block.js');\n\n/**\n * lost-utility: A general utility toolbelt for Lost. Included are mixins\n * that require no additional input other than being called.\n *\n * @param {string} [edit|clearfix] - The mixin to create.\n *\n * @example\n *   body {\n *     lost-utility: edit;\n *   }\n *\n * @example\n *   body {\n *     lost-utility: edit rgb(33,44,55);\n *   }\n *\n * @example\n *   .parent {\n *     lost-utility: clearfix;\n *   }\n *   .child {\n *     lost-column: 1/2;\n *   }\n */\n\nfunction getColorValue(string) {\n  var color = string.split('rgb(')[1];\n  color = color.split(')')[0];\n  return color;\n}\n\nmodule.exports = function lostUtilityDecl(css) {\n  css.walkDecls('lost-utility', function lostUtilityDeclFunction(decl) {\n    var utilityArray = decl.value.split(' ');\n    var utility = utilityArray[0];\n    var color;\n\n    if (utility === 'edit') {\n      if (utilityArray[1]) {\n        color = getColorValue(decl.value);\n\n        newBlock(\n          decl,\n          ' *:not(input):not(textarea):not(select)',\n          ['background-color'],\n          ['rgba(' + color + ', 0.1)']\n        );\n      } else {\n        newBlock(\n          decl,\n          ' *:not(input):not(textarea):not(select)',\n          ['background-color'],\n          ['rgba(0, 0, 255, 0.1)']\n        );\n      }\n    }\n\n    if (utility === 'clearfix') {\n      newBlock(\n        decl,\n        ':after',\n        ['content', 'display', 'clear'],\n        ['\\'\\'', 'table', 'both']\n      );\n\n      newBlock(\n        decl,\n        ':before',\n        ['content', 'display'],\n        ['\\'\\'', 'table']\n      );\n    }\n\n    if (decl.parent.nodes.length === 1) {\n      decl.parent.remove();\n    } else {\n      decl.remove();\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/new-block.js":"module.exports = function newBlock(decl, selector, props, values) {\n  var completeSelector;\n  var block;\n\n  function appendToSelectors(_thisSelector, selectorToAppend) {\n    var appendedSelectors = [];\n\n    _thisSelector.split(',').forEach(function appendSelectorsFunction(item) {\n      appendedSelectors.push(item + selectorToAppend);\n    });\n\n    return appendedSelectors.join(',');\n  }\n\n  completeSelector = appendToSelectors(decl.parent.selector, selector);\n\n  block = decl.parent.cloneAfter({\n    selector: completeSelector\n  });\n\n  block.walkDecls(function removeDeclarationFunction(declaration) {\n    declaration.remove();\n  });\n\n  props.forEach(function addRulesFunction(prop, i) {\n    var rule = decl.clone({\n      prop: prop,\n      value: values[i].toString()\n    });\n\n    rule.moveTo(block);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-flex-container.js":"/**\n * lost-flex-container: Creates a Flexbox container.\n *\n * @param {string} [row|column] - The flex-direction the container should\n *   create. This is typically opposite to the element you're creating so a\n *   row would need `lost-flex-container: column;`.\n *\n * @example\n *   section {\n *     lost-flex-container: row;\n *   }\n *   div {\n *     lost-column: 1/2 flex;\n *   }\n */\nmodule.exports = function lostFlexContainerDecl(css) {\n  css.walkDecls('lost-flex-container', function lostFlexContainerFunction(decl) {\n    decl.cloneBefore({\n      prop: 'display',\n      value: 'flex'\n    });\n\n    if (decl.value === 'column') {\n      decl.cloneBefore({\n        prop: 'flex-flow',\n        value: 'column nowrap'\n      });\n    } else {\n      decl.cloneBefore({\n        prop: 'flex-flow',\n        value: 'row wrap'\n      });\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-center.js":"var newBlock = require('./new-block.js');\n\n/**\n * lost-center: Horizontally center a container element and apply padding\n * to it.\n *\n * @param {length} [max-width] - A max-width to assign. Can be any unit.\n *\n * @param {length} [padding] - Padding on the left and right of the element.\n *   Can be any unit.\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @example\n *   section {\n *     lost-center: 980px;\n *   }\n *\n * @example\n *   section {\n *     lost-center: 1140px 30px flex;\n *   }\n */\nmodule.exports = function lostCenterDecl(css, settings) {\n  css.walkDecls('lost-center', function lostCenterFunction(decl) {\n    var declArr = [];\n    var lostCenterPadding;\n    var lostCenterFlexbox = settings.flexbox;\n\n    declArr = decl.value.split(' ');\n\n    if (declArr[1] !== undefined && declArr[1].search(/^\\d/) !== -1) {\n      lostCenterPadding = declArr[1];\n    }\n\n    if (declArr.indexOf('flex') !== -1) {\n      lostCenterFlexbox = 'flex';\n    }\n\n    if (declArr.indexOf('no-flex') !== -1) {\n      lostCenterFlexbox = 'no-flex';\n    }\n\n    decl.parent.nodes.forEach(function lostCenterPaddingFunction(declaration) {\n      if (declaration.prop === 'lost-center-padding') {\n        lostCenterPadding = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostCenterFlexboxFunction(declaration) {\n      if (declaration.prop === 'lost-center-flexbox') {\n        if (declaration.value === 'flex') {\n          lostCenterFlexbox = declaration.value;\n        }\n\n        declaration.remove();\n      }\n    });\n\n    if (lostCenterFlexbox === 'no-flex') {\n      newBlock(\n        decl,\n        ':after',\n        ['content', 'display', 'clear'],\n        ['\\'\\'', 'table', 'both']\n      );\n\n      newBlock(\n        decl,\n        ':before',\n        ['content', 'display'],\n        ['\\'\\'', 'table']\n      );\n    } else {\n      decl.cloneBefore({\n        prop: 'display',\n        value: 'flex'\n      });\n\n      decl.cloneBefore({\n        prop: 'flex-flow',\n        value: 'row wrap'\n      });\n    }\n\n    decl.cloneBefore({\n      prop: 'max-width',\n      value: declArr[0]\n    });\n\n    decl.cloneBefore({\n      prop: 'margin-left',\n      value: 'auto'\n    });\n\n    decl.cloneBefore({\n      prop: 'margin-right',\n      value: 'auto'\n    });\n\n    if (lostCenterPadding !== undefined) {\n      decl.cloneBefore({\n        prop: 'padding-left',\n        value: lostCenterPadding\n      });\n\n      decl.cloneBefore({\n        prop: 'padding-right',\n        value: lostCenterPadding\n      });\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-align.js":"var newBlock = require('./new-block.js');\n\n/**\n * lost-align: Align nested elements. Apply this to a parent container.\n *\n * @param {string} [reset|horizontal|vertical|top-left|top-center|top|\n * top-right|middle-left|left|middle-center|center|middle-right|right|\n * bottom-left|bottom-center|bottom|bottom-right] - The position the nested\n *   element takes relative to the containing element.\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @example\n *   .parent {\n *     lost-align: right;\n *     width: 600px;\n *     height: 400px;\n *   }\n *   .child {\n *     width: 300px;\n *     height: 150px;\n *   }\n */\nmodule.exports = function lostAlign(css, settings) {\n  css.walkDecls('lost-align', function alignDirectionFunction(decl) {\n    var declArr = [];\n    var alignDirection;\n    var flexbox = settings.flexbox;\n\n    declArr = decl.value.split(' ');\n    alignDirection = declArr[0];\n\n    if (declArr.indexOf('flex') !== -1) {\n      flexbox = 'flex';\n    }\n\n    if (flexbox !== 'flex') {\n      if (alignDirection === 'reset') {\n        decl.cloneBefore({\n          prop: 'position',\n          value: 'static'\n        });\n        newBlock(\n          decl,\n          ' > *',\n          ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n          ['static', 'auto', 'auto', 'auto', 'auto', 'translate(0, 0)']\n        );\n      } else {\n        decl.cloneBefore({\n          prop: 'position',\n          value: 'relative'\n        });\n        if (alignDirection === 'horizontal') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', 'auto', 'auto', 'auto', '50%', 'translate(-50%, 0)']\n          );\n        } else if (alignDirection === 'vertical') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '50%', 'auto', 'auto', 'auto', 'translate(0, -50%)']\n          );\n        } else if (alignDirection === 'top-left') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '0', 'auto', 'auto', '0', 'translate(0, 0)']\n          );\n        } else if (alignDirection === 'top-center' || alignDirection === 'top') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '0', 'auto', 'auto', '50%', 'translate(-50%, 0)']\n          );\n        } else if (alignDirection === 'top-right') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '0', '0', 'auto', 'auto', 'translate(0, 0)']\n          );\n        } else if (alignDirection === 'middle-left' || alignDirection === 'left') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '50%', 'auto', 'auto', '0', 'translate(0, -50%)']\n          );\n        } else if (alignDirection === 'middle-center' || alignDirection === 'center') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '50%', 'auto', 'auto', '50%', 'translate(-50%, -50%)']\n          );\n        } else if (alignDirection === 'middle-right' || alignDirection === 'right') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', '50%', '0', 'auto', 'auto', 'translate(0, -50%)']\n          );\n        } else if (alignDirection === 'bottom-left') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', 'auto', 'auto', '0', '0', 'translate(0, 0)']\n          );\n        } else if (alignDirection === 'bottom-center' || alignDirection === 'bottom') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', 'auto', 'auto', '0', '50%', 'translate(-50%, 0)']\n          );\n        } else if (alignDirection === 'bottom-right') {\n          newBlock(\n            decl,\n            ' > *',\n            ['position', 'top', 'right', 'bottom', 'left', 'transform'],\n            ['absolute', 'auto', '0', '0', 'auto', 'translate(0, 0)']\n          );\n        }\n      }\n    } else if (alignDirection === 'reset') {\n      decl.cloneBefore({\n        prop: 'display',\n        value: 'initial'\n      });\n      newBlock(\n        decl,\n        '',\n        ['justify-content', 'align-items'],\n        ['inherit', 'inherit']\n      );\n    } else {\n      decl.cloneBefore({\n        prop: 'display',\n        value: 'flex'\n      });\n      if (alignDirection === 'horizontal') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['center', 'inherit']\n        );\n      } else if (alignDirection === 'vertical') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['inherit', 'center']\n        );\n      } else if (alignDirection === 'top-left') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['flex-start', 'flex-start']\n        );\n      } else if (alignDirection === 'top-center' || alignDirection === 'top') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['center', 'flex-start']\n        );\n      } else if (alignDirection === 'top-right') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['flex-end', 'flex-start']\n        );\n      } else if (alignDirection === 'middle-left' || alignDirection === 'left') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['flex-start', 'center']\n        );\n      } else if (alignDirection === 'middle-center' || alignDirection === 'center') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['center', 'center']\n        );\n      } else if (alignDirection === 'middle-right' || alignDirection === 'right') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['flex-end', 'center']\n        );\n      } else if (alignDirection === 'bottom-left') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['flex-start', 'flex-end']\n        );\n      } else if (alignDirection === 'bottom-center' || alignDirection === 'bottom') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['center', 'flex-end']\n        );\n      } else if (alignDirection === 'bottom-right') {\n        newBlock(\n          decl,\n          '',\n          ['justify-content', 'align-items'],\n          ['flex-end', 'flex-end']\n        );\n      }\n    }\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-column.js":"var newBlock = require('./new-block.js');\n\nvar lgLogic = require('./_lg-logic');\n\n/**\n * lost-column: Creates a column that is a fraction of the size of its\n * containing element's width with a gutter.\n *\n * @param {string} [fraction] - This is a simple fraction of the containing\n *   element's width.\n *\n * @param {integer} [cycle] - Lost works by assigning a margin-right to all\n *   elements except the last in the row. If settings.cycle is set to auto\n *   it will do this by default by using the denominator of the fraction you\n *   pick. To override the default use this param.,\n *   e.g.: .foo { lost-column: 2/4 2; }\n *\n * @param {length} [gutter] - The margin on the right side of the element\n *   used to create a gutter. Typically this is left alone and\n *   settings.gutter will be used, but you can override it here if you want\n *   certain elements to have a particularly large or small gutter (pass 0\n *   for no gutter at all).\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @example\n *   div {\n *     lost-column: 1/3;\n *   }\n *\n * @example\n *   div {\n *     lost-column: 2/6 3 60px flex;\n *   }\n */\nmodule.exports = function lostColumnDecl(css, settings, result) {\n  css.walkDecls('lost-column', function lostColumnFunction(decl) {\n    var declArr = [];\n    var gridDirection = settings.direction;\n    var lostColumn;\n    var lostColumnCycle;\n    var unit = settings.gridUnit;\n    var lostColumnRounder = settings.rounder;\n    var lostColumnGutter = settings.gutter;\n    var lostColumnFlexbox = settings.flexbox;\n    var validUnits = ['%', 'vw'];\n\n    if (decl.value !== 'none') {\n      if (settings.cycle === 'auto') {\n        lostColumnCycle = decl.value.split('/')[1];\n      } else {\n        lostColumnCycle = settings.cycle;\n      }\n\n      declArr = decl.value.split(' ');\n      lostColumn = declArr[0];\n\n      if (declArr[1] !== undefined && declArr[1].search(/^\\d/) !== -1) {\n        lostColumnCycle = declArr[1];\n      }\n\n      if (declArr[1] === 'flex' || declArr[1] === 'no-flex' || declArr[1] === 'auto') {\n        lostColumnCycle = declArr[0].split('/')[1];\n      }\n\n      if (declArr[2] !== undefined && declArr[2].search(/^\\d/) !== -1) {\n        lostColumnGutter = declArr[2];\n      }\n\n      if (declArr.indexOf('flex') !== -1) {\n        lostColumnFlexbox = 'flex';\n      }\n\n      if (declArr.indexOf('no-flex') !== -1) {\n        lostColumnFlexbox = 'no-flex';\n      }\n\n      decl.parent.nodes.forEach(function lostColumnCycleFunction(declaration) {\n        if (declaration.prop === 'lost-column-cycle') {\n          lostColumnCycle = declaration.value;\n\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(declaration => {\n        if (declaration.prop === 'lost-unit') {\n          if (lgLogic.validateUnit(declaration.value, validUnits)) {\n            unit = declaration.value;\n          } else {\n            decl.warn(result, `${declaration.value} is not a valid unit for lost-column`);\n          }\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(function lostColumnRounderFunction(declaration) {\n        if (declaration.prop === 'lost-column-rounder') {\n          lostColumnRounder = declaration.value;\n\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(function lostColumnGutterFunction(declaration) {\n        if (declaration.prop === 'lost-column-gutter') {\n          lostColumnGutter = declaration.value;\n\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(function lostColumnFlexboxFunction(declaration) {\n        if (declaration.prop === 'lost-column-flexbox') {\n          if (declaration.prop === 'flex') {\n            lostColumnFlexbox = 'flex';\n          }\n\n          declaration.remove();\n        }\n      });\n\n      if (lostColumnFlexbox === 'flex') {\n        decl.cloneBefore({\n          prop: 'flex-grow',\n          value: '0'\n        });\n        decl.cloneBefore({\n          prop: 'flex-shrink',\n          value: '0'\n        });\n\n        if (lostColumnCycle !== 0) {\n          if (gridDirection === 'rtl') {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n)',\n              ['margin-left', 'margin-right'],\n              [0, 'auto']\n            );\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n)',\n              ['margin-right', 'margin-left'],\n              [0, 'auto']\n            );\n          }\n        }\n\n        decl.cloneBefore({\n          prop: 'flex-basis',\n          value: lgLogic.calcValue(lostColumn, lostColumnGutter, lostColumnRounder, unit)\n        });\n\n        if (gridDirection === 'rtl') {\n          newBlock(\n            decl,\n            ':last-child',\n            ['margin-left'],\n            [0]\n          );\n          newBlock(\n            decl,\n            ':nth-child(1n)',\n            ['margin-left', 'margin-right'],\n            [lostColumnGutter, 0]\n          );\n        } else {\n          newBlock(\n            decl,\n            ':last-child',\n            ['margin-right'],\n            [0]\n          );\n          newBlock(\n            decl,\n            ':nth-child(1n)',\n            ['margin-right', 'margin-left'],\n            [lostColumnGutter, 0]\n          );\n        }\n\n      } else {\n        if (lostColumnCycle !== 0) {\n          if (settings.clearing === 'left') {\n            if (gridDirection === 'rtl') {\n              newBlock(\n                decl,\n                ':nth-child(' + lostColumnCycle + 'n + 1)',\n                ['clear'],\n                ['right']\n              );\n            } else {\n              newBlock(\n                decl,\n                ':nth-child(' + lostColumnCycle + 'n + 1)',\n                ['clear'],\n                ['left']\n              );\n            }\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n + 1)',\n              ['clear'],\n              ['both']\n            );\n          }\n\n          if (gridDirection === 'rtl') {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n)',\n              ['margin-left', 'float'],\n              [0, 'left']\n            );\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n)',\n              ['margin-right', 'float'],\n              [0, 'right']\n            );\n          }\n        } else {\n          if (gridDirection === 'rtl') {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n)',\n              ['float'],\n              ['left']\n            );\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostColumnCycle + 'n)',\n              ['float'],\n              ['right']\n            );\n          }\n        }\n\n        if (gridDirection === 'rtl') {\n          newBlock(\n            decl,\n            ':last-child',\n            ['margin-left'],\n            [0]\n          );\n        } else {\n          newBlock(\n            decl,\n            ':last-child',\n            ['margin-right'],\n            [0]\n          );\n        }\n\n        if (gridDirection === 'rtl') {\n          newBlock(\n            decl,\n            ':nth-child(1n)',\n            ['float', 'margin-left', 'clear'],\n            ['right', lostColumnGutter, 'none']\n          );\n        } else {\n          newBlock(\n            decl,\n            ':nth-child(1n)',\n            ['float', 'margin-right', 'clear'],\n            ['left', lostColumnGutter, 'none']\n          );\n        }\n\n      }\n      decl.cloneBefore({\n        prop: 'width',\n        value: lgLogic.calcValue(lostColumn, lostColumnGutter, lostColumnRounder, unit)\n      });\n    } else {\n      decl.cloneBefore({\n        prop: 'width',\n        value: 'auto'\n      });\n\n      if (gridDirection === 'rtl') {\n        newBlock(\n          decl,\n          ':nth-child(1n + 1)',\n          ['float', 'clear', 'margin-left', 'width'],\n          ['none', 'none', 0, 'auto']\n        );\n\n        newBlock(\n          decl,\n          ':nth-child(1n)',\n          ['float', 'clear', 'margin-left', 'width'],\n          ['none', 'none', 0, 'auto']\n        );\n\n        newBlock(\n          decl,\n          ':last-child',\n          ['float', 'clear', 'margin-left', 'width'],\n          ['none', 'none', 0, 'auto']\n        );\n      } else {\n        newBlock(\n          decl,\n          ':nth-child(1n + 1)',\n          ['float', 'clear', 'margin-right', 'width'],\n          ['none', 'none', 0, 'auto']\n        );\n\n        newBlock(\n          decl,\n          ':nth-child(1n)',\n          ['float', 'clear', 'margin-right', 'width'],\n          ['none', 'none', 0, 'auto']\n        );\n\n        newBlock(\n          decl,\n          ':last-child',\n          ['float', 'clear', 'margin-right', 'width'],\n          ['none', 'none', 0, 'auto']\n        );\n      }\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/_lg-logic.js":"module.exports = {\n\n  calcValue: function(fraction, gutter, rounder, unit) {\n    var calcValue = '';\n    var gutterLogic = '';\n\n    if (!gutter) {\n      gutter = '0';\n    }\n\n    if (gutter !== '0') {\n      gutterLogic = ` - (${gutter} - ${gutter} * ${fraction})`;\n    }\n\n    if (!unit) {\n      unit = '%';\n    }\n\n    calcValue = `calc(${rounder}${unit} * ${fraction}${gutterLogic})`;\n    return calcValue;\n  },\n  validateUnit: function(value, validUnits) {\n    var validation = false;\n\n    if (validUnits.indexOf(value) !== -1) {\n      validation = true;\n    }\n    return validation;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-row.js":"var newBlock = require('./new-block.js');\n\nvar lgLogic = require('./_lg-logic');\n\n/**\n * lost-row: Creates a row that is a fraction of the size of its containing\n * element's height with a gutter.\n *\n * @param {string} [fraction] - This is a simple fraction of the containing\n *   element's height.\n *\n * @param {length} [gutter] - The margin on the bottom of the element used\n *   to create a gutter. Typically this is left alone and settings.gutter\n *   will be used, but you can override it here if you want certain elements\n *   to have a particularly large or small gutter (pass 0 for no gutter at\n *   all).\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @param {string} [none] - Resets to a standard browser default.\n *\n * @example\n *   section {\n *     height: 100%;\n *   }\n *   div {\n *     lost-row: 1/3;\n *   }\n */\nmodule.exports = function lostRowDecl(css, settings, result) {\n  css.walkDecls('lost-row', function lostRowDeclFunction(decl) {\n    var declArr = [];\n    var lostRow;\n    var unit = settings.gridUnit;\n    var lostRowRounder = settings.rounder;\n    var lostRowGutter = settings.gutter;\n    var lostRowFlexbox = settings.flexbox;\n    var validUnits = ['%', 'vh'];\n\n    if (decl.value !== 'none') {\n      declArr = decl.value.split(' ');\n      lostRow = declArr[0];\n\n      if (declArr[1] !== undefined && declArr[1].search(/^\\d/) !== -1) {\n        lostRowGutter = declArr[1];\n      }\n\n      if (declArr.indexOf('flex') !== -1) {\n        lostRowFlexbox = 'flex';\n      }\n\n      if (declArr.indexOf('no-flex') !== -1) {\n        lostRowFlexbox = 'no-flex';\n      }\n\n      decl.parent.nodes.forEach(function lostRowRounderFunction(declaration) {\n        if (declaration.prop === 'lost-row-rounder') {\n          lostRowRounder = declaration.value;\n\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(function lostRowGutterFunction(declaration) {\n        if (declaration.prop === 'lost-row-gutter') {\n          lostRowGutter = declaration.value;\n\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(function lostRowFlexboxFunction(declaration) {\n        if (declaration.prop === 'lost-row-flexbox') {\n          if (declaration.prop === 'flex') {\n            lostRowFlexbox = 'flex';\n          }\n\n          declaration.remove();\n        }\n      });\n\n      decl.parent.nodes.forEach(declaration => {\n        if (declaration.prop === 'lost-unit') {\n          if (lgLogic.validateUnit(declaration.value, validUnits)) {\n            unit = declaration.value;\n          } else {\n            decl.warn(result, `${declaration.value} is not a valid unit for lost-row`);\n          }\n          declaration.remove();\n        }\n      });\n\n      decl.cloneBefore({\n        prop: 'width',\n        value: '100%'\n      });\n\n      if (lostRowFlexbox === 'flex') {\n        decl.cloneBefore({\n          prop: 'flex',\n          value: '0 0 auto'\n        });\n      }\n\n      if (lostRowGutter !== '0') {\n        decl.cloneBefore({\n          prop: 'height',\n          value: lgLogic.calcValue(lostRow, lostRowGutter, lostRowRounder, unit)\n        });\n      } else {\n        decl.cloneBefore({\n          prop: 'height',\n          value: lgLogic.calcValue(lostRow, lostRowGutter, lostRowRounder, unit)\n        });\n      }\n\n      decl.cloneBefore({\n        prop: 'margin-bottom',\n        value: lostRowGutter\n      });\n\n      newBlock(\n        decl,\n        ':last-child',\n        ['margin-bottom'],\n        [0]\n      );\n    } else {\n      decl.cloneBefore({\n        prop: 'width',\n        value: 'auto'\n      });\n\n      decl.cloneBefore({\n        prop: 'height',\n        value: 'auto'\n      });\n\n      decl.cloneBefore({\n        prop: 'margin-bottom',\n        value: '0'\n      });\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-waffle.js":"var newBlock = require('./new-block.js');\n\nvar lgLogic = require('./_lg-logic');\n\n/**\n * lost-waffle: Creates a block that is a fraction of the size of its\n * containing element's width AND height with a gutter on the right\n * and bottom.\n *\n * @param {string} [fraction] - This is a simple fraction of the containing\n *   element's width and height.\n *\n * @param {integer} [cycle] - Lost works by assigning a margin-right/bottom\n *   to all elements except the last row (no margin-bottom) and the last\n *   column (no margin-right). It does this by default by using the\n *   denominator of the fraction you pick. To override this default use this\n *   param., e.g.: .foo { lost-waffle: 2/4 2; }\n *\n * @param {length} [gutter] - The margin on the right and bottom side of the\n *   element used to create a gutter. Typically this is left alone and the\n *   global $gutter will be used, but you can override it here if you want\n *   certain elements to have a particularly large or small gutter (pass 0\n *   for no gutter at all).\n *\n * @param {string} [float-right] - Tells whether or not the cycle should float right\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @example\n *   section {\n *     height: 100%;\n *   }\n *   div {\n *     lost-waffle: 1/3;\n *   }\n */\nmodule.exports = function lostWaffleDecl(css, settings, result) {\n  css.walkDecls('lost-waffle', function lostWaffleDeclFunction(decl) {\n    var declArr = [];\n    var gridDirection = settings.direction;\n    var lostWaffle;\n    var floatRight;\n    var lostWaffleCycle;\n    var unit = settings.gridUnit;\n    var lostWaffleRounder = settings.rounder;\n    var lostWaffleGutter = settings.gutter;\n    var lostWaffleFlexbox = settings.flexbox;\n    var validUnits = ['%', 'vh', 'vw'];\n\n    function cloneAllBefore(props) {\n      Object.keys(props).forEach(function traverseProps(prop) {\n        decl.cloneBefore({\n          prop: prop,\n          value: props[prop]\n        });\n      });\n    }\n\n    if (settings.cycle === 'auto') {\n      lostWaffleCycle = decl.value.split('/')[1];\n    } else {\n      lostWaffleCycle = settings.cycle;\n    }\n\n    declArr = decl.value.split(' ');\n    lostWaffle = declArr[0];\n\n    if (declArr[1] !== undefined && declArr[1].search(/^\\d/) !== -1) {\n      lostWaffleCycle = declArr[1];\n    }\n\n    if (declArr[1] === 'flex' || declArr[1] === 'no-flex' || declArr[1] === 'auto') {\n      lostWaffleCycle = declArr[0].split('/')[1];\n    }\n\n    if (declArr[2] !== undefined && declArr[2].search(/^\\d/) !== -1) {\n      lostWaffleGutter = declArr[2];\n    }\n\n    if (declArr.indexOf('flex') !== -1) {\n      lostWaffleFlexbox = 'flex';\n    }\n\n    if (declArr.indexOf('no-flex') !== -1) {\n      lostWaffleFlexbox = 'no-flex';\n    }\n\n    if (declArr.indexOf('float-right') !== -1) {\n      floatRight = true;\n    }\n\n    decl.parent.nodes.forEach(function lostWaffleRounderFunction(declaration) {\n      if (declaration.prop === 'lost-waffle-rounder') {\n        lostWaffleRounder = declaration.value;\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostWaffleCycleFunction(declaration) {\n      if (declaration.prop === 'lost-waffle-cycle') {\n        lostWaffleCycle = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostWaffleGutterFunction(declaration) {\n      if (declaration.prop === 'lost-waffle-gutter') {\n        lostWaffleGutter = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(declaration => {\n      if (declaration.prop === 'lost-unit') {\n        if (lgLogic.validateUnit(declaration.value, validUnits)) {\n          unit = declaration.value;\n        } else {\n          decl.warn(result, `${declaration.value} is not a valid unit for lost-waffle`);\n        }\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostWaffleFlexboxFunction(declaration) {\n      if (declaration.prop === 'lost-waffle-flexbox') {\n        if (declaration.prop === 'flex') {\n          lostWaffleFlexbox = 'flex';\n        }\n\n        declaration.remove();\n      }\n    });\n\n    if (lostWaffleFlexbox === 'flex') {\n      decl.cloneBefore({\n        prop: 'flex-grow',\n        value: '0'\n      });\n      decl.cloneBefore({\n        prop: 'flex-shrink',\n        value: '0'\n      });\n\n      if (lostWaffleCycle !== 0) {\n        newBlock(\n          decl,\n          ':nth-last-child(-n + ' + lostWaffleCycle + ')',\n          ['margin-bottom'],\n          [0]\n        );\n\n        if (gridDirection === 'rtl') {\n          newBlock(\n            decl,\n            ':nth-child(' + lostWaffleCycle + 'n)',\n            ['margin-left', 'margin-right'],\n            [0, 'auto']\n          );\n        } else {\n          newBlock(\n            decl,\n            ':nth-child(' + lostWaffleCycle + 'n)',\n            ['margin-right', 'margin-left'],\n            [0, 'auto']\n          );\n        }\n      }\n\n      decl.cloneBefore({\n        prop: 'flex-basis',\n        value: lgLogic.calcValue(lostWaffle, lostWaffleGutter, lostWaffleRounder)\n      });\n\n      if (gridDirection === 'rtl') {\n        newBlock(\n          decl,\n          ':last-child',\n          ['margin-left', 'margin-bottom'],\n          [0, 0]\n        );\n\n        newBlock(\n          decl,\n          ':nth-child(1n)',\n          ['margin-left', 'margin-bottom', 'margin-right'],\n          [lostWaffleGutter, lostWaffleGutter, 0]\n        );\n      } else {\n        newBlock(\n          decl,\n          ':last-child',\n          ['margin-right', 'margin-bottom'],\n          [0, 0]\n        );\n\n        newBlock(\n          decl,\n          ':nth-child(1n)',\n          ['margin-right', 'margin-bottom', 'margin-left'],\n          [lostWaffleGutter, lostWaffleGutter, 0]\n        );\n      }\n    } else {\n      if (lostWaffleCycle !== 0) {\n        newBlock(\n          decl,\n          ':nth-last-child(-n + ' + lostWaffleCycle + ')',\n          ['margin-bottom'],\n          [0]\n        );\n\n        if (settings.clearing === 'left') {\n          // FIXME: this doesn't make sense w/ rtl\n          if (gridDirection === 'rtl') {\n            newBlock(\n              decl,\n              ':nth-child(' + lostWaffleCycle + 'n + 1)',\n              ['clear'],\n              ['right']\n            );\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostWaffleCycle + 'n + 1)',\n              ['clear'],\n              ['left']\n            );\n          }\n        } else {\n          newBlock(\n            decl,\n            ':nth-child(' + lostWaffleCycle + 'n + 1)',\n            ['clear'],\n            ['both']\n          );\n        }\n        if (gridDirection === 'rtl') {\n          // FIXME: this doesn't make sense w/ rtl\n          if (floatRight === true) {\n            newBlock(\n              decl,\n              ':nth-child(' + lostWaffleCycle + 'n)',\n              ['margin-left', 'float'],\n              [0, 'left']\n            );\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostWaffleCycle + 'n)',\n              ['margin-left'],\n              [0]\n            );\n          }\n        } else {\n          if (floatRight === true) {\n            newBlock(\n              decl,\n              ':nth-child(' + lostWaffleCycle + 'n)',\n              ['margin-right', 'float'],\n              [0, 'right']\n            );\n          } else {\n            newBlock(\n              decl,\n              ':nth-child(' + lostWaffleCycle + 'n)',\n              ['margin-right'],\n              [0]\n            );\n          }\n        }\n      }\n\n      if (gridDirection === 'rtl') {\n        newBlock(\n          decl,\n          ':last-child',\n          ['margin-left', 'margin-bottom'],\n          [0, 0]\n        );\n\n        newBlock(\n          decl,\n          ':nth-child(1n)',\n          ['float', 'margin-left', 'margin-bottom', 'clear'],\n          ['right', lostWaffleGutter, lostWaffleGutter, 'none']\n        );\n      } else {\n        newBlock(\n          decl,\n          ':last-child',\n          ['margin-right', 'margin-bottom'],\n          [0, 0]\n        );\n\n        newBlock(\n          decl,\n          ':nth-child(1n)',\n          ['float', 'margin-right', 'margin-bottom', 'clear'],\n          ['left', lostWaffleGutter, lostWaffleGutter, 'none']\n        );\n      }\n    }\n\n    cloneAllBefore({\n      width: lgLogic.calcValue(lostWaffle, lostWaffleGutter, lostWaffleRounder, unit),\n      height: lgLogic.calcValue(lostWaffle, lostWaffleGutter, lostWaffleRounder, unit)\n    });\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-offset.js":"/**\n * lost-offset: Margin to the left, right, bottom, or top, of an element\n * depending on if the fraction passed is positive or negative. It works for\n * both horizontal and vertical grids but not both.\n *\n * @param {string} [fraction] - Fraction of the container to be offset.\n *\n * @param {string} [row|column] - Direction the grid is going. Should be the\n *   opposite of the column or row it's being used on. Defaults to row.\n *\n * @param {length} [gutter] - How large the gutter involved is, typically\n *   this won't be adjusted, but if you have set the elements for that\n *   container to have different gutters than default, you will need to\n *   match that gutter here as well.\n *\n * @example\n *   .two-elements {\n *     lost-column: 1/3;\n *   }\n *   .two-elements:first-child {\n *     lost-offset: 1/3;\n *   }\n */\nmodule.exports = function lostOffsetDecl(css, settings) {\n  css.walkDecls('lost-offset', function lostOffsetDeclFunction(decl) {\n    var declArr = [];\n    var lostOffset;\n    var lostOffsetNumerator;\n    var lostOffsetDirection;\n    var lostOffsetRounder = settings.rounder;\n    var lostOffsetGutter = settings.gutter;\n\n    function cloneAllBefore(props) {\n      Object.keys(props).forEach(function traverseProps(prop) {\n        decl.cloneBefore({\n          prop: prop,\n          value: props[prop]\n        });\n      });\n    }\n\n    declArr = decl.value.split(' ');\n    lostOffset = declArr[0];\n    lostOffsetNumerator = declArr[0].split('/')[0];\n\n    if ((declArr[1] !== undefined && declArr[1] === 'row') || declArr[1] === 'column') {\n      lostOffsetDirection = declArr[1];\n    }\n\n    if (declArr[2] !== undefined && declArr[2].search(/^\\d/) !== -1) {\n      lostOffsetGutter = declArr[2];\n    }\n\n    decl.parent.nodes.forEach(function lostOffsetRounderFunction(declaration) {\n      if (declaration.prop === 'lost-offset-rounder') {\n        lostOffsetRounder = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostOffsetDirectionFunction(declaration) {\n      if (declaration.prop === 'lost-offset-direction') {\n        lostOffsetDirection = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostOffsetGutterFunction(declaration) {\n      if (declaration.prop === 'lost-offset-gutter') {\n        lostOffsetGutter = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    if (lostOffsetDirection === 'column') {\n      if (lostOffsetNumerator > 0) {\n        if (lostOffsetGutter !== '0') {\n          decl.cloneBefore({\n            prop: 'margin-bottom',\n            value: 'calc(' + lostOffsetRounder + '% * '\n            + lostOffset + ' - (' + lostOffsetGutter + ' - '\n            + lostOffsetGutter + ' * ' + lostOffset + ') + ('\n            + lostOffsetGutter + ' * 2)) !important'\n          });\n        } else {\n          decl.cloneBefore({\n            prop: 'margin-bottom',\n            value: 'calc(' + lostOffsetRounder + '% * ' + lostOffset + ') !important'\n          });\n        }\n      } else if (lostOffsetNumerator < 0) {\n        if (lostOffsetGutter !== '0') {\n          decl.cloneBefore({\n            prop: 'margin-top',\n            value: 'calc(' + lostOffsetRounder + '% * ('\n            + lostOffset + ' * -1) - (' + lostOffsetGutter + ' - '\n            + lostOffsetGutter + ' * (' + lostOffset + ' * -1)) + '\n            + lostOffsetGutter + ') !important'\n          });\n        } else {\n          decl.cloneBefore({\n            prop: 'margin-top',\n            value: 'calc(' + lostOffsetRounder + '% * ' + lostOffset + ') !important'\n          });\n        }\n      } else {\n        decl.cloneBefore({\n          prop: 'margin-top',\n          value: '0 !important'\n        });\n\n        decl.cloneBefore({\n          prop: 'margin-bottom',\n          value: lostOffsetGutter + ' !important'\n        });\n      }\n    } else if (lostOffsetNumerator > 0) {\n      if (lostOffsetGutter !== '0') {\n        decl.cloneBefore({\n          prop: 'margin-left',\n          value: 'calc(' + lostOffsetRounder + '% * (-'\n          + lostOffset + ' * -1) - (' + lostOffsetGutter + ' - '\n          + lostOffsetGutter + ' * (-' + lostOffset + ' * -1)) + '\n          + lostOffsetGutter + ') !important'\n        });\n      } else {\n        decl.cloneBefore({\n          prop: 'margin-left',\n          value: 'calc(' + lostOffsetRounder + '% * ' + lostOffset + ') !important'\n        });\n      }\n    } else if (lostOffsetNumerator < 0) {\n      if (lostOffsetGutter !== '0') {\n        decl.cloneBefore({\n          prop: 'margin-left',\n          value: 'calc(' + lostOffsetRounder + '% * '\n          + lostOffset + ' - (' + lostOffsetGutter + ' - '\n          + lostOffsetGutter + ' * ' + lostOffset + ') + '\n          + lostOffsetGutter + ') !important'\n        });\n      } else {\n        decl.cloneBefore({\n          prop: 'margin-left',\n          value: 'calc(' + lostOffsetRounder + '% * ' + lostOffset + ') !important'\n        });\n      }\n    } else {\n      cloneAllBefore({\n        'margin-left': '0 !important',\n        'margin-right': lostOffsetGutter + ' !important'\n      });\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-move.js":"/**\n * lost-move: Source ordering. Shift elements left, right, up, or down, by\n * their left or top position by passing a positive or negative fraction.\n *\n * @param {string} [fraction] - Fraction of the container to be shifted.\n *\n * @param {string} [row|column] - Direction the grid is going. Should be the\n *   opposite of the column or row it's being used on.\n *\n * @param {length} [gutter] - Adjust the size of the gutter for this\n *   movement. Should match the element's gutter.\n *\n * @example\n *   div {\n *     lost-column: 1/2;\n *   }\n *   div:first-child {\n *     lost-move: 1/2;\n *   }\n *   div:last-child {\n *     lost-move: -1/2;\n *   }\n */\nmodule.exports = function lostMoveDecl(css, settings) {\n  css.walkDecls('lost-move', function lostMoveDeclFunction(decl) {\n    var declArr = [];\n    var lostMove;\n    var lostMoveDirection;\n    var lostMoveRounder = settings.rounder;\n    var lostMoveGutter = settings.gutter;\n\n    declArr = decl.value.split(' ');\n    lostMove = declArr[0];\n\n    if ((declArr[1] !== undefined && declArr[1] === 'row') || declArr[1] === 'column') {\n      lostMoveDirection = declArr[1];\n    }\n\n    decl.parent.nodes.forEach(function lostMoveRounderFunction(declaration) {\n      if (declaration.prop === 'lost-move-rounder') {\n        lostMoveRounder = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach( (declaration) => {\n      if (declaration.prop === 'lost-column') {\n        var columnArray = declaration.value.split(' ');\n        if (columnArray[2]) {\n          lostMoveGutter = columnArray[2];\n        }\n      }\n      if (declaration.prop === 'lost-column-gutter') {\n        lostMoveGutter = declaration.value;\n      }\n    });\n\n    decl.parent.nodes.forEach( (declaration) => {\n      if (declaration.prop === 'lost-row') {\n        var rowArray = declaration.value.split(' ');\n        if (rowArray[1]) {\n          lostMoveGutter = rowArray[1];\n        }\n      }\n      if (declaration.prop === 'lost-row-gutter') {\n        lostMoveGutter = declaration.value;\n      }\n    });\n\n    if (declArr[2] !== undefined && declArr[2].search(/^\\d/) !== -1) {\n      lostMoveGutter = declArr[2];\n    }\n\n    decl.parent.nodes.forEach(function lostMoveDirectionFunction(declaration) {\n      if (declaration.prop === 'lost-move-direction') {\n        lostMoveDirection = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostMoveGutterFunction(declaration) {\n      if (declaration.prop === 'lost-move-gutter') {\n        lostMoveGutter = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.cloneBefore({\n      prop: 'position',\n      value: 'relative'\n    });\n\n    if (lostMoveDirection === 'column') {\n      if (lostMoveGutter !== '0') {\n        decl.cloneBefore({\n          prop: 'top',\n          value: 'calc(' + lostMoveRounder + '% * '\n          + lostMove + ' - (' + lostMoveGutter + ' - '\n          + lostMoveGutter + ' * ' + lostMove + ') + ' + lostMoveGutter + ')'\n        });\n      } else {\n        decl.cloneBefore({\n          prop: 'top',\n          value: 'calc(' + lostMoveRounder + '% * ' + lostMove + ')'\n        });\n      }\n    } else if (lostMoveGutter !== '0') {\n      decl.cloneBefore({\n        prop: 'left',\n        value: 'calc(' + lostMoveRounder + '% * '\n        + lostMove + ' - (' + lostMoveGutter + ' - '\n        + lostMoveGutter + ' * ' + lostMove + ') + ' + lostMoveGutter + ')'\n      });\n    } else {\n      decl.cloneBefore({\n        prop: 'left',\n        value: 'calc(' + lostMoveRounder + '% * ' + lostMove + ')'\n      });\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-masonry-wrap.js":"var newBlock = require('./new-block.js');\n\n/**\n * lost-masonry-wrap: Creates a wrapping element for working with JS Masonry\n * libraries like Isotope. Assigns a negative margin on each side of this\n * wrapping element.\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @param {length} [gutter] - How large the gutter involved is, typically\n *   this won't be adjusted and will inherit settings.gutter, but it's made\n *   available if you want your masonry grid to have a special gutter, it\n *   should match your masonry-column's gutter.\n *\n * @example\n *   section {\n *     lost-masonry-wrap: no-flex;\n *   }\n *   div {\n *     lost-masonry-column: 1/3;\n *   }\n */\nmodule.exports = function lostMasonryWrapDecl(css, settings) {\n  css.walkDecls('lost-masonry-wrap', function lostMasonryWrapDeclFunction(decl) {\n    var declArr = [];\n    var lostMasonryWrapFlexbox = settings.flexbox;\n    var lostMasonryWrapGutter = settings.gutter;\n    var lostMasonryWrapGutterUnit;\n\n    function cloneAllBefore(props) {\n      Object.keys(props).forEach(function traverseProps(prop) {\n        decl.cloneBefore({\n          prop: prop,\n          value: props[prop]\n        });\n      });\n    }\n\n    declArr = decl.value.split(' ');\n\n    if ((declArr[0] !== undefined && declArr[0] === 'flex') || declArr[0] === 'no-flex') {\n      lostMasonryWrapFlexbox = declArr[0];\n    }\n\n    if (declArr.indexOf('flex') !== -1) {\n      lostMasonryWrapFlexbox = 'flex';\n    }\n\n    if (declArr.indexOf('no-flex') !== -1) {\n      lostMasonryWrapFlexbox = 'no-flex';\n    }\n\n    if (declArr[1] !== undefined && declArr[1].search(/^\\d/) !== -1) {\n      lostMasonryWrapGutter = declArr[1];\n    }\n\n    decl.parent.nodes.forEach(function lostMasonryWrapFlexboxFunction(declaration) {\n      if (declaration.prop === 'lost-masonry-wrap-flexbox') {\n        if (declaration.value === 'flex') {\n          lostMasonryWrapFlexbox = 'flex';\n        }\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostMasonryWrapFunction(declaration) {\n      if (declaration.prop === 'lost-masonry-wrap-gutter') {\n        declaration.remove();\n      }\n    });\n\n    if (lostMasonryWrapFlexbox !== 'flex') {\n      newBlock(\n        decl,\n        ':after',\n        ['content', 'display', 'clear'],\n        ['\\'\\'', 'table', 'both']\n      );\n\n      newBlock(\n        decl,\n        ':before',\n        ['content', 'display'],\n        ['\\'\\'', 'table']\n      );\n    } else {\n      decl.cloneBefore({\n        prop: 'display',\n        value: 'flex'\n      });\n\n      decl.cloneBefore({\n        prop: 'flex-flow',\n        value: 'row wrap'\n      });\n    }\n\n    lostMasonryWrapGutterUnit = lostMasonryWrapGutter.match(/\\D/g).join('');\n\n    cloneAllBefore({\n      'margin-left': (parseInt(lostMasonryWrapGutter, 10) / -2) + lostMasonryWrapGutterUnit,\n      'margin-right': (parseInt(lostMasonryWrapGutter, 10) / -2) + lostMasonryWrapGutterUnit\n    });\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lost-masonry-column.js":"/**\n * lost-masonry-column: Creates a column for working with JS masonry\n * libraries like Isotope. Assigns a margin to each side of the element.\n *\n * @param {length} [gutter] - How large the gutter involved is, typically\n *   this won't be adjusted and will inherit settings.gutter, but it's made\n *   available if you want your masonry grid to have a special gutter, it\n *   should match your masonry-row's gutter.\n *\n * @param {string} [flex|no-flex] - Determines whether this element should\n *   use Flexbox or not.\n *\n * @example\n *   section {\n *     lost-masonry-wrap: flex 60px;\n *   }\n *   div {\n *     lost-masonry-column: 1/3 60px flex;\n *   }\n */\nmodule.exports = function lostMasonryColumnDecl(css, settings) {\n  css.walkDecls('lost-masonry-column', function lostMasonryColumnFunction(decl) {\n    var declArr = [];\n    var lostMasonryColumn;\n    var lostMasonryColumnRounder = settings.rounder;\n    var lostMasonryColumnFlexbox = settings.flexbox;\n    var lostMasonryColumnGutter = settings.gutter;\n    var lostMasonryColumnGutterUnit;\n\n    function cloneAllBefore(props) {\n      Object.keys(props).forEach(function traverseProps(prop) {\n        decl.cloneBefore({\n          prop: prop,\n          value: props[prop]\n        });\n      });\n    }\n\n    declArr = decl.value.split(' ');\n    lostMasonryColumn = declArr[0];\n\n    if (declArr[1] !== undefined && declArr[1].search(/^\\d/) !== -1) {\n      lostMasonryColumnGutter = declArr[1];\n    }\n\n    if ((declArr[2] !== undefined && declArr[2] === 'flex') || declArr[2] === 'no-flex') {\n      lostMasonryColumnFlexbox = declArr[2];\n    }\n\n    if (declArr.indexOf('flex') !== -1) {\n      lostMasonryColumnFlexbox = 'flex';\n    }\n\n    if (declArr.indexOf('no-flex') !== -1) {\n      lostMasonryColumnFlexbox = 'no-flex';\n    }\n\n    decl.parent.nodes.forEach(function lostMasonryColumnRounderFunction(declaration) {\n      if (declaration.prop === 'lost-masonry-column-rounder') {\n        lostMasonryColumnRounder = declaration.value;\n\n        declaration.remove();\n      }\n    });\n\n    decl.parent.nodes.forEach(function lostMasonryColumnGutterFunction(declaration) {\n      if (declaration.prop === 'lost-masonry-column-gutter') {\n        lostMasonryColumnGutter = declaration.value;\n\n        declaration.remove();\n      }\n    });\n    decl.parent.nodes.forEach(function lostMasonryColumnRounderFunction(declaration) {\n      if (declaration.prop === 'lost-rounder') {\n        lostMasonryColumnRounder = declaration.value;\n\n        declaration.remove();\n      }\n    });\n    decl.parent.nodes.forEach(function lostMasonryColumnFlexboxFunction(declaration) {\n      if (declaration.prop === 'lost-masonry-column-flexbox') {\n        if (declaration.value === 'flex') {\n          lostMasonryColumnFlexbox = 'flex';\n        }\n\n        declaration.remove();\n      }\n    });\n\n    lostMasonryColumnGutterUnit = lostMasonryColumnGutter.match(/\\D/g).join('');\n\n    if (lostMasonryColumnFlexbox === 'flex') {\n      decl.cloneBefore({\n        prop: 'flex',\n        value: '0 0 auto'\n      });\n    } else {\n      decl.cloneBefore({\n        prop: 'float',\n        value: 'left'\n      });\n    }\n\n    if (lostMasonryColumnGutter !== '0') {\n      cloneAllBefore({\n        width: 'calc(' + lostMasonryColumnRounder + '% * ' + lostMasonryColumn +\n        ' - ' + lostMasonryColumnGutter + ')',\n        'margin-left': (parseInt(lostMasonryColumnGutter, 10) / 2) + lostMasonryColumnGutterUnit,\n        'margin-right': (parseInt(lostMasonryColumnGutter, 10) / 2) + lostMasonryColumnGutterUnit\n      });\n    } else {\n      cloneAllBefore({\n        width: 'calc(' + lostMasonryColumnRounder + '% * ' + lostMasonryColumn + ')',\n        'margin-left': (parseInt(lostMasonryColumnGutter, 10) / 2) + lostMasonryColumnGutterUnit,\n        'margin-right': (parseInt(lostMasonryColumnGutter, 10) / 2) + lostMasonryColumnGutterUnit\n      });\n    }\n\n    decl.remove();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/check-node-version.js":"var warning = 'LostGrid is dropping support for Node versions 0.10 and 0.12 after version 8.\\n If you need to retain your use of Node v0.10 v0.12 it\\'s recommended you don\\'t\\n update without testing it first. Submit an issue if you have questions. \\n\\n lostgrid.org';\n\nmodule.exports = function checkNodeVersion(nodeVersion) {\n  var returnOutput = {\n    warn: false,\n    warning: warning\n  };\n  if (nodeVersion) {\n    nodeVersion = nodeVersion.split('.')[0];\n    if (nodeVersion < 1) {\n      returnOutput.warn = true;\n    }\n  }\n  return returnOutput;\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/lib/lg-gutter.js":"module.exports = function lgGutter(css, settings) {\n  var gutter = settings.gutter;\n  css.walkDecls( declaration => {\n    if (\n      /(\\$lost-gutter)/g.test(declaration.value) &&\n      !/(\\$lost-gutter-local)/g.test(declaration.value)\n    ) {\n      var newGlobalValue = declaration.value.replace(/(\\$lost-gutter)/g, gutter);\n      declaration.value = newGlobalValue;\n    }\n    if (/(\\$lost-gutter-local)/g.test(declaration.value)) {\n      var newLocalValue = gutter;\n      declaration.parent.nodes.forEach( parentDeclaration => {\n        var declarationArray = parentDeclaration.value.split(' ');\n\n        if (\n          parentDeclaration.prop === 'lost-column' ||\n          parentDeclaration.prop === 'lost-waffle' ||\n          parentDeclaration.prop === 'lost-offset'\n        ) {\n          if (declarationArray[2] !== undefined && declarationArray[2].search(/^\\d/) !== -1) {\n            newLocalValue = declarationArray[2];\n          }\n        } else if (\n          parentDeclaration.prop === 'lost-center' ||\n          parentDeclaration.prop === 'lost-masonry-wrap' ||\n          parentDeclaration.prop === 'lost-masonry-column' ||\n          parentDeclaration.prop === 'lost-row'\n        ) {\n          if (declarationArray[1] !== undefined && declarationArray[1].search(/^\\d/) !== -1) {\n            newLocalValue = declarationArray[1];\n\n          }\n        } else if (parentDeclaration.prop === 'lost-column-gutter') {\n          newLocalValue = parentDeclaration.value;\n        }\n\n        declaration.value = newLocalValue;\n      });\n\n      newLocalValue = declaration.value.replace(/(\\$lost-gutter-local)/g, gutter);\n      declaration.value = newLocalValue;\n    }\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-lost/node_modules/lost/.eslintrc.js":"module.exports = {\n    'env': {\n        'es6': true,\n        'node': true\n    },\n    'extends': 'eslint:recommended',\n    'parserOptions': {\n        'sourceType': 'module'\n    },\n    'rules': {\n        'indent': [\n            'error',\n            2\n        ],\n        'linebreak-style': [\n            'error',\n            'unix'\n        ],\n        'quotes': [\n            'error',\n            'single'\n        ],\n        'semi': [\n            'error',\n            'always'\n        ]\n    }\n};\n"}